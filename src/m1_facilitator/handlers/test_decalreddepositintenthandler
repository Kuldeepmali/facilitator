
// Copyright 2020 OpenST Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import BigNumber from 'bignumber.js';
import DepositIntentRepository from '../repositories/DepositIntentRepository';
import MessageRepository from '../repositories/MessageRepository';
import Message, { MessageStatus, MessageType } from '../models/Message';
import Logger from '../../m0_facilitator/Logger';
import DepositIntent from '../models/DepositIntent';
import Utils from '../../common/Utils';
import GatewayRepository from '../repositories/GatewayRepository';

export default class DeclaredDepositIntentHandler {
  private depositIntentRepository: DepositIntentRepository;

  private messageRepository: MessageRepository;

  private gatewayRepository: GatewayRepository;

  public constructor(
    depositIntentRepository: DepositIntentRepository,
    gatewayRepository: GatewayRepository,
    messageRepository: MessageRepository,
  ) {
    this.depositIntentRepository = depositIntentRepository;
    this.gatewayRepository = gatewayRepository;
    this.messageRepository = messageRepository;
  }

  public async handle(records: any[]): Promise<void> {
    const depositIntents: DepositIntent[] = [];
    let messageObj: Message | null;
    const messages: Message[] = await Promise.all(records.map(
      async (record): Promise<Message> => {
        messageObj = await this.messageRepository.get(record.messageHash);
        const gatewayRecord = await this.gatewayRepository.get(record.contractAddress);
        if (messageObj === null) {
          if (gatewayRecord != null) {
            messageObj = new Message(
              record.messageHash,
              MessageType.Deposit,
              MessageStatus.Undeclared,
              MessageStatus.Undeclared,
              gatewayRecord.remoteGA,
              new BigNumber(record.feeGasPrice),
              new BigNumber(record.feeGasLimit),
              new BigNumber(record.blockNumber),
              record.intentHash,
            );

            Logger.debug(`Creating message object ${JSON.stringify(messageObj)}`);
          }
          const depositIntentObj = await this.depositIntentRepository.get(
            record.messageHash,
          );
          if (depositIntentObj == null) {
            const depositIntent = new DepositIntent(
              record.messageHash,
              record.tokenAddress,
              new BigNumber(record.amount),
              Utils.toChecksumAddress(record.beneficiary),
              record.intentHash,
            );
            depositIntents.push(depositIntent);
          }
        }
        if (messageObj !== null
          && messageObj.sourceStatus === MessageStatus.Undeclared
          && messageObj.type === MessageType.Deposit
        ) {
          messageObj.sourceStatus = MessageStatus.Declared;
          await this.messageRepository.save(messageObj);
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return messageObj!;
      },
    ));

    console.log('message model : ', messages);
    const saveDepositIntentsPromises = [];
    for (let i = 0; i < depositIntents.length; i += 1) {
      Logger.debug('Updating message hash in deposit intent model for requestHash:'
       + `${depositIntents[i].messageHash}`);
      saveDepositIntentsPromises.push(
        this.depositIntentRepository.save(depositIntents[i]),
      );
    }
    await Promise.all(saveDepositIntentsPromises);
    Logger.debug('Deposit intents saved');

    const saveMessagesPromises = [];
    for (let i = 0; i < messages.length; i += 1) {
      Logger.debug('Changing source status to declared for messageHash:'
      + `${messages[i].messageHash}`);
      saveMessagesPromises.push(this.messageRepository.save(messages[i]));
    }
    await Promise.all(saveMessagesPromises);
    Logger.debug('Messages saved');
  }
}
